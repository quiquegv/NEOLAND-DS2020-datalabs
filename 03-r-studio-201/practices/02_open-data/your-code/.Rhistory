)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(
data = mpg,
mapping = aes(x = displ, y = hwy)
) +
geom_smooth(
data = mpg,
mapping = aes(x = displ, y = hwy,group = drv),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot() +
geom_point(
data = mpg,
mapping = aes(x = displ, y = hwy)
) +
geom_smooth(
data = mpg,
mapping = aes(x = displ, y = hwy,group = drv),
se = FALSE
)
bar <- ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = FALSE,
width = 1
) +
theme(aspect.ratio = 1) +
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
nz <- map_data("world")
View(Santa_Bárbara)
View(quakes)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv, color = dvr), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv, color = drv), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv, color = drv), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv, color = drv), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv, ), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv,linetype = drv ), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv,linetype = drv ), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv,linetype = drv ), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv, se= TRUE)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv), se= TRUE) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv,linetype = drv ), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv), se= TRUE) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv,se= TRUE)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(x = displ, y = hwy, group = drv,linetype = drv ), se = FALSE)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy, color = drv,se= TRUE)) +
geom_smooth(aes(x = displ, y = hwy), se =FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(tidyr)
# Librerias y Carga de datos
library(lubridate)
library(dplyr)
library(ggplot2)
library(tidyr)
data <- readRDS('/home/enrique/jupyter_notebook/neoland/07. Clases y apuntes R/data/data.rds')
str(data)
data_bk <- data
colSums(is.na(Data))
colSums(is.na(data))
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
cat("\014")
gc()
library(lubridate)
library(nycflights13)
install.packages("nycflights13")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(lubridate)
library(nycflights13)
library(ggplot2)
# Fecha actual
today()
# Fecha actual completa
now()
# Transformar fechas en formato cadena de texto
ymd("2020-November-21")
mdy("November 21th, 2020")
dmy("21-November-20")
ymd(20201121)
ymd_hms("2020-11-21 13:50:11")
# Transforma en universal time. Hay que tener en cuenta que de UTC hay 12 zonas horarias a la izda y 12 a la dcha.
# Dentro de estas funciones podemos marcarle la zona horaria con el parametro "tz"
mdy_hm("11/21/2020 13:50")
ymd_hms("2020-11-21 13:50:11", tz = "Europe/Madrid" )
ymd("2020-11-21", tz = "Europe/Madrid")
ymd(20201121, tz = "Europe/Madrid")
flights <- flights
flights %>% select(year, month, day, hour, minute)
# Transformación a fechas -> En el dataSet anterior no están los datos como fechas
flights %>% # selección del DS
select(year, month, day, hour, minute) %>% # selección de variables
mutate(
departure = make_datetime(year, month, day, hour, minute, tz = 'GMT') # cambio de variables a una nueva var departure.
) # la dif con python es que hay que meter el inplace.
# Crear la transformación del datetime en variables dep_time y arr_time
make_datetime_100 <- function(year, month, day, time){
make_datetime(year, month, day, time %/% 100, time %% 100)
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
shed_dep_time = make_datetime_100(
year,month, day, sched_dep_time
),
sched_arr_time = make_datetime_100(
year, month,day, sched_dep_time),
air_time = make_datetime_100(year, month, day, air_time)
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
# visualización de datos con ggplot
flights_dt %>%
ggplot(aes(dep_time)) + # datos que se usasn para mostrar el gráfico
geom_freqpoly(binwidth = 86400) # tipo de gráfico. binwith es el ancho, en este caso coresponde a los segundos de un día. Así nos muestra por días.
flights_dt %>% filter(dep_time<ymd(20130102)) %>%
ggplot(aes(dep_time)) + geom_freqpoly(binwidth = 600)
as_datetime(today())
as_date(now())
# en muchos casos tenemos un formato del tipo UNIX - 1970 - 01- 01
as_datetime(60*60*10)
as_date(365* 10 + 2)
datetime <- ymd_hms('2020-11-28 13:20:16')
datetime
# Transformaciones en anyos
year(datetime)
# Transformamos en mes
month(datetime)
# transformamos en dia
mday(datetime)
#transformamos en dia del anyo
yday(datetime)
# en el dia de la semana
wday(datetime)
# podemos asignarle atributos a month() y wday() de forma literal
month(datetime, label = TRUE)
wday(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
wday(datetime, label = TRUE, abbr = FALSE, locale = "german") # REVISAR este punto, no cambia el idioma
# Visualizamos los dias de la semana plicado a flights
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE, abbr = FALSE, locale = 'german', week_start = 1)) %>%
ggplot(aes(x = wday)) +
geom_bar()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
knitr::opts_chunk$set(echo = TRUE)
rm(list = ls())
cat("\014")
gc()
library(lubridate)
library(nycflights13)
library(dplyr)
vuelos <- flights
colnames(vuelos) <- c("anio","mes","dia","horario_salida", "salida_programada","atraso_salida", "horario_llegada", "llegada_programada","atraso_llegada", "aerolinea","vuelo","codigo_cola","origen", "destino","tiempo_vuelo","distancia","hora", "minuto","fecha_hora")
# lo que hace es seleccionar y convertir columnas en formato fecha según le digamos:
vuelos %>% select(anio,mes,dia,hora,minuto)
vuelos_1 <- vuelos %>% select(anio,mes,dia,hora,minuto) %>%
mutate(salida = make_datetime(anio,mes,dia,hora,minuto))
# Mi intento.
horarios1 <- vuelos %>% select(anio,mes,dia,horario_salida,horario_salida) %>% mutate(horario_salida1 = make_datetime(anio,mes,dia,horario_salida%/%100,horario_salida%%100))
horarios1
Horario <- function(anio,mes,dia,tiempo){
make_datetime(anio,mes,dia,tiempo%/%100,tiempo%/%100)
}
vuelos <- na.omit(vuelos) # esto elimina los Na por fila. Es decir si e alguna de las celdas de una fila detecta un na, la elimina entera. En este caso lo que hacemos es quitar los vuelos que por el motivo que sea están cancelados.
vuelos_1 <- vuelos
vuelos <- vuelos %>% mutate(Salida = Horario(anio,mes,dia,horario_salida),
salida_programada = Horario(anio,mes,dia,salida_programada),
llegada_programada = Horario(anio,mes,dia,llegada_programada),
Llegada = Horario(anio,mes,dia,horario_llegada)
)
# si lo que queremos es quedarnos solo que esas cuatro en vez de mutate usamos transmute, de no usar transmute, tendriamos que hacer un select
vuelos_tr <- vuelos_1 %>% transmute(Salida = Horario(anio,mes,dia,horario_salida),
salida_programada = Horario(anio,mes,dia,salida_programada),
llegada_programada = Horario(anio,mes,dia,llegada_programada),
Llegada = Horario(anio,mes,dia,horario_llegada)
)
vuelos_tr2 <- vuelos  %>% select(Salida,salida_programada, llegada_programada,Llegada)
library(ggplot2)
vuelos_tr %>% ggplot(aes(Salida)) + geom_freqpoly(binwidth = 86400)
vuelos_tr2 %>% filter(Llegada<ymd(20130102)) %>% ggplot(aes(Llegada)) + geom_freqpoly()
Vuelos_ <- vuelos_tr %>%
mutate(LLegada = if_else(Llegada<Salida,
ymd_hms(Llegada+days(1)),
ymd_hms(Llegada)))
# NOTA: Para operar con fechas y horas tenemos que usar el if_else, con ifelse no lo devuelve con formato de fecha
Vuelos_2 <- vuelos_tr %>%
mutate(
nocturno = Llegada<Salida,
LLegada = Llegada + days(nocturno * 1)
) %>% select(-nocturno)
intersect(Vuelos_,Vuelos_2)
# Cambiar a formato fecha la variable ID_FCH_DATOS
data$Fecha <- ymd(data$ID_FCH_DATOS)
as_date(20200601)
ymd(20200601)
# Cambiar a formato fecha la variable ID_FCH_DATOS
data$Fecha <- ymd(data$ID_FCH_DATOS)
avg_delay = mean(arr_delay, na.rm = TRUE) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
# mismo gráfico pero con las horas programadas.
sched_dep <- flights_dt %>%
mutate(minute = minute(shed_dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n())
library(tidyverse)
library(dplyr)
library(lubridate)
library(nycflights13)
today()
now()
# Transformar fehcas en formato cadena de texto
ymd("2020-11-21")
mdy("November 28th, 2020")
dmy("28-November-2020")
ymd(20201121)
ymd_hms("2020-11-21 13:50:11")
mdy_hm("11/21/2020 13:50")
ymd_hms("2020-11-21 13:50:11", tz = "Europe/Madrid")
ymd_hms("2020-11-21 13:50:11", tz = "Australia/Sydney")
ymd("2020-11-30", tz = "CET") # investigad....
ymd("2020-11-21", tz = "CET")
ymd(20201121, tz = "Europe/Madrid")
flights %>%
select(year, month, day, hour, minute)
# Transformación a fechas
flights %>%
select(year, month, day, hour, minute) %>%
mutate(
departure = make_datetime(year, month, day, hour, minute, tz='GMT')
)
# Probamos con POSIXlt
# Crear la transformación del datetime en variables dep_time y arr_time
make_datetime_100 <- function(year, month, day, time){
make_datetime(year, month, day, time %/% 100, time %% 100)
}
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(
year, month, day, sched_dep_time
),
sched_arr_time = make_datetime_100(
year, month, day, sched_arr_time
),
air_time = make_datetime_100(year, month, day, air_time)
) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
# Visualizamos los datos ggplot2
flights_dt %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 86400) # este valor se corresponde a los segundos de un día
# Visualizamos por día
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600) # son segundos igual a 10 minutos
as_datetime(today())
as_date(now())
# En muchos casos tenemos un formato del tipo UNIX - 1970-01-01
as_datetime(60 * 60 * 10)
as_date(365 * 10 + 2)
datetime <- ymd_hms("2020-11-28 13:20:16")
datetime
# transformar en anyos
year(datetime)
# transformamos en mes
month(datetime)
# transformamos en día
mday(datetime)
# transformamos en día del anyo
yday(datetime)
# en día de la semana
wday(datetime)
# podemos asignarle atributos a month() de forma literal
month(datetime, label = TRUE)
# podemos asignarle atributos a wday() de forma literal
wday(datetime, label = TRUE)
# días de la semana de DOM - LUN por defecto
wday(datetime, label = TRUE, abbr = FALSE)
# días de la semana de LUN - DOM
wday(datetime, label = TRUE, abbr = FALSE, locale = "Italian", week_start = 1)
# meses del año
month(datetime, label = TRUE, abbr = FALSE, locale = "French")
# Visualizamos los días de la semana aplicado a flights
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE, abbr = FALSE, locale = 'german', week_start = 1)) %>%
ggplot(aes(x = wday)) +
geom_bar()
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(
avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
# Duration es igual a la diferencia entre fecha actual (periodo) y fecha inicio
age <- today() - ymd(19800101)
age
as.duration(age) # esta función siempre devolverá los segundos de duración
# Separamos por componentes del tiempo
dseconds(15)
dminutes(10)
dhours(c(12,14))
ddays(0:5)
dweeks(3)
dyears(1)
2 * dyears(1)
dyears(1) + dweeks(12) + dhours(15)
today()
now()
last_year <- today() - dyears(1)
last_year
dweeks(dyears(1))
dyears(1)
years(1)
dyears(1) == years(1)
tomorrow <- today() + ddays(1)
tomorrow
one_pm <- ymd_hms(
"2020-03-28 13:00:25",
tz = "Europe/Madrid"
)
one_pm
one_pm <- ymd_hms(
"2020-03-29 13:00:25",
tz = "Europe/Madrid"
)
one_pm
one_pm + ddays(1)
one_pm <- ymd_hms(
"2020-10-24 13:00:25",
tz = "Europe/Madrid"
)
one_pm
one_pm <- ymd_hms(
"2020-10-25 13:00:25",
tz = "Europe/Madrid"
)
one_pm
flights_dt %>%
filter(arr_time < dep_time)
# transformamos los datos creando una nueva columna overnight
flights_dt <- flights_dt %>%
mutate(
overnight = arr_time < dep_time,
arr_time = arr_time + days(overnight * 1),
sched_arr_time = sched_arr_time + days(overnight * 1)
)
# Comprobamos que ya no existen estas diferencias
flights_dt %>%
filter(overnight, arr_time < dep_time)
# comprobar que efectivamente el vuelo de arr_time haya cambiado
flights_dt %>%
filter(origin == "EWR" & dest == "BQN")
years(1) / days(1)
next_year <- today() + years(1)
next_year
(today() %--% next_year) / ddays(1)
(today() %--% next_year) / dweeks(1)
(today() %--% next_year) / months(1)
Sys.timezone()
Sys.time()
Sys.Date()
length(OlsonNames())
head(OlsonNames())
a <-ymd_hms("2020-11-30 12:00:00", tz = "Europe/Madrid")
b <-ymd_hms("2020-11-30 22:00:00", tz = "Australia/Sydney")
c <-ymd_hms("2020-11-30 06:00:00", tz = "America/New_York")
a
b
c
a - b
b - c
a - c
a <-ymd_hms("2020-11-30 12:00:00", tz = "Europe/Madrid")
b <-ymd_hms("2020-11-30 12:00:00", tz = "Australia/Sydney")
c <-ymd_hms("2020-11-30 12:00:00", tz = "America/New_York")
a
b
c
a - b
b - c
a - c
d <-c(a,b,c)
d
# Con with_tz me aplica el cambio a la fecha y hora al tz
prueba <- with_tz(d, tzone = "Asia/Tokyo")
prueba
prueba - d
# con force_tz cambia la etiqueta tz pero no el horario y fecha
prueba_b <-  force_tz(d, tzone = "Asia/Tokyo")
prueba_b
ymd(20200601)
(data$ID_FCH_DATOS)[1]
data$ID_FCH_DATOS[1]
data$ID_FCH_DATOS(1)
as_date(20200601)
as_datetime(20200601)
as_datetime(ymd(20200601)
as_datetime(ymd(20200601))
ymd(20200601)
# Cambiar a formato fecha la variable ID_FCH_DATOS
data$Fecha <- data %>% mutate(ymd(ID_FCH_DATOS))
datos <- readRDS('/home/enrique/jupyter_notebook/neoland/07. Clases y apuntes R/data/data.rds')
data_bk <- datos
data
str(datos)
# Cambiar a formato fecha la variable ID_FCH_DATOS
datos$Fecha <- data %>% ymd(ID_FCH_DATOS)
# Cambiar a formato fecha la variable ID_FCH_DATOS
datos$Fecha <- datos %>% ymd(ID_FCH_DATOS)
datos$ID_FCH_DATOS[1]
datos$ID_FCH_DATOS[2]
# Cambiar a formato fecha la variable ID_FCH_DATOS
datos$Fecha <- ymd(datos$ID_FCH_DATOS)
table(datos$ID_FCH_DATOS)
datos %>% group_by(Fecha) %>% count(unique(Fichero))
datos %>% group_by(Fecha) %>% aggregate(unique(Fichero))
aggregate(datos$Fichero, by = datos$IMPAGO_EXP, length)
aggregate(datos$Fichero, by = datos[c('Fecha')], length)
Ficheros_dia <- aggregate(datos$Fichero, by = datos[c('Fecha')], length)
plot(Ficheros_dia$Fecha,Ficheros_dia$x)
Ficheros_dia <- aggregate(datos$IMPAGO_EXP, by = datos[c('Fecha')], length)
Ficheros_dia <- aggregate(datos$IMPAGO_EXP, by = datos[c('Fecha')], sum)
plot(Ficheros_dia$Fecha,Ficheros_dia$x)
Ficheros_dia <- aggregate(datos$Fichero, by = datos[c('Fecha')], length)
plot(Ficheros_dia$Fecha,Ficheros_dia$x)
Importes_dia <- aggregate(datos$IMPAGO_EXP, by = datos[c('Fecha')], sum)
plot(Ficheros_dia$Fecha,Ficheros_dia$x)
Importes_dia <- aggregate(datos$IMPAGO_EXP, by = datos[c('Fecha')], sum)
plot(Importes_dia$Fecha,Importes_dia$x)
