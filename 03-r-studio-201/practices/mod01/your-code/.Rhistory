knitr::opts_chunk$set(echo = TRUE)
# Cargamos los paquetes R que vamos a usar
library(ggplot2)
library(dplyr)
# Guardamos el conjunto de datos test y train en un único dataset
test <- read.csv('titanic-test.csv',stringsAsFactors = FALSE)
train <- read.csv('/home/enrique/neoland/NEOLAND-DS2020-datalabs/03-r-studio-201/practices/mod01/titanic-train.csv', stringsAsFactors = FALSE)
# Guardamos el conjunto de datos test y train en un único dataset
test <- read.csv('/home/enrique/neoland/NEOLAND-DS2020-datalabs/03-r-studio-201/practices/mod01/titanic-test.csv',stringsAsFactors = FALSE)
totalData <- bind_rows(train,test)
filas=dim(train)[1]
# Verificamos la estructura del conjunto de datos
str
filas=dim(train)[1]
# Verificamos la estructura del conjunto de datos
str(totalData)
# Estadísticas de valores vacíos
colSums(is.na(totalData))
colSums(totalData=="")
# Tomamos valor "C" para los valores vacíos de la variable "Embarked"
totalData$Embarked[totalData$Embarked==""]="C"
# Tomamos la media para valores vacíos de la variable "Age"
totalData$Age[is.na(totalData$Age)] <- mean(totalData$Age,na.rm=T)
# ¿Con qué variables tendría sentido un proceso de discretización?
apply(totalData,2, function(x) length(unique(x)))
# Discretizamos las variables con pocas clases
cols<-c("Survived","Pclass","Sex","Embarked")
for (i in cols){
totalData[,i] <- as.factor(totalData[,i])
}
# Después de los cambios, analizamos la nueva estructura del conjunto de datos
str(totalData)
# Visualizamos la relación entre las variables "sex" y "survival":
ggplot(data=totalData[1:filas,],aes(x=Sex,fill=Survived))+geom_bar()
# Otro punto de vista. Survival como función de Embarked:
ggplot(data = totalData[1:filas,],aes(x=Embarked,fill=Survived))+geom_bar(position="fill")+ylab("Frecuencia")
t<-table(totalData[1:filas,]$Embarked,totalData[1:filas,]$Survived)
for (i in 1:dim(t)[1]){
t[i,]<-t[i,]/sum(t[i,])*100
}
t
# Ahora, podemos dividir el gráfico de Embarked por Pclass:
ggplot(data = totalData[1:filas,],aes(x=Embarked,fill=Survived))+geom_bar(position="fill")+facet_wrap(~Pclass)
# Survivial como función de SibSp y Parch
ggplot(data = totalData[1:filas,],aes(x=SibSp,fill=Survived))+geom_bar()
ggplot(data = totalData[1:filas,],aes(x=Parch,fill=Survived))+geom_bar()
# Vemos como las forma de estos dos gráficos es similar. Este hecho nos puede indicar presencia de correlaciones altas.
# Construimos un atributo nuevo: family size.
totalData$FamilySize <- totalData$SibSp + totalData$Parch +1;
totalData1<-totalData[1:filas,]
ggplot(data = totalData1[!is.na(totalData[1:filas,]$FamilySize),],aes(x=FamilySize,fill=Survived))+geom_histogram(binwidth =1,position="fill")+ylab("Frecuencia")
# Observamos como familias de entre 2 y 6 miembros tienen más del 50% de posibilidades de supervivencia.
# Survival como función de age:
ggplot(data = totalData1[!(is.na(totalData[1:filas,]$Age)),],aes(x=Age,fill=Survived))+geom_histogram(binwidth =3)
ggplot(data = totalData1[!is.na(totalData[1:filas,]$Age),],aes(x=Age,fill=Survived))+geom_histogram(binwidth = 3,position="fill")+ylab("Frecuencia")
DataOnlineShopers <- read.csv('archive.ics.uci.edu/ml/machine-learning-databases/00468/online_shoppers_intention.csv',stringsAsFactors = FALSE)
DataOnlineShopers <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/00468/online_shoppers_intention.csv',stringsAsFactors = FALSE)
View(DataOnlineShopers)
If you use this dataset, please cite:
Sakar, C.O., Polat, S.O., Katircioglu, M. et al. Neural Comput & Applic (2018). [Web Link]
str(DataOnlineShopers)
# Estadísticas de valores vacíos
colSums(is.na(totalData))
# Estructura de los datos
str(DataOnlineShopers)
# Valores nulos
colSums(is.na(DataOnlineShopers))
# Estadísticas de valores vacíos
colSums(is.na(totalData))
colSums(totalData=="")
# Tomamos valor "C" para los valores vacíos de la variable "Embarked"
totalData$Embarked[totalData$Embarked==""]="C"
# Tomamos la media para valores vacíos de la variable "Age"
totalData$Age[is.na(totalData$Age)] <- mean(totalData$Age,na.rm=T)
# Valores nulos o vacios:
colSums(is.na(DataOnlineShopers))
colSums(DataOnlineShopers=="")
# ¿Con qué variables tendría sentido un proceso de discretización?
apply(totalData,2, function(x) length(unique(x)))
# Discretizamos las variables con pocas clases
cols<-c("Survived","Pclass","Sex","Embarked")
for (i in cols){
totalData[,i] <- as.factor(totalData[,i])
}
# Después de los cambios, analizamos la nueva estructura del conjunto de datos
str(totalData)
apply(totalData,2, function(x) length(unique(x)))
apply(DataOnlineShopers,2, function(x) length(unique(x)))
table(DataOnlineShopers$Administrative,DataOnlineShopers$Revenue)
table(DataOnlineShopers$Administrative,DataOnlineShopers$Revenue)
table(DataOnlineShopers$Informational,DataOnlineShopers$Revenue)
table(DataOnlineShopers$ProductRelated,DataOnlineShopers$Revenue)
View(DataOnlineShopers)
View(DataOnlineShopers)
DataOnlineShopers$Web_visitadas <- DataOnlineShopers$Administrative + DataOnlineShopers$Informational + DataOnlineShopers$ProductRelated
DataOnlineShopers$Web_visitadas_duration <- DataOnlineShopers$Administrative_Duration + DataOnlineShopers$Informational_Duration + DataOnlineShopers$ProductRelated_Duration
knitr::opts_chunk$set(echo = TRUE)
# Redacta aquí el código R para el estudio del juego de datos Adult
# Cambio el DataSet para no volver a trabajar con Adult. He elegido este DataSet que trata sobre el comportamiento de los determinados usuarios en la compra online.
DataOnlineShopers <- read.csv('http://archive.ics.uci.edu/ml/machine-learning-databases/00468/online_shoppers_intention.csv',stringsAsFactors = FALSE)
# el objetivo  sería analizar sus tendencias y para predecir en que les ha llevado a comprar y que no.
str(DataOnlineShopers)
# Estructura de los dato
str(DataOnlineShopers)
# Valores nulos o vacios:
colSums(is.na(DataOnlineShopers))
colSums(DataOnlineShopers=="")
apply(DataOnlineShopers,2, function(x) length(unique(x)))
DataOnlineShopers$Web_visitadas <- DataOnlineShopers$Administrative + DataOnlineShopers$Informational + DataOnlineShopers$ProductRelated
DataOnlineShopers$Web_visitadas_duration <- DataOnlineShopers$Administrative_Duration + DataOnlineShopers$Informational_Duration + DataOnlineShopers$ProductRelated_Duration
str(DataOnlineShopers)
table(DataOnlineShopers$SpecialDay)
table(DataOnlineShopers$SpecialDay)
table(DataOnlineShopers$SpecialDay)
```{r}
table(DataOnlineShopers$SpecialDay)
table(DataOnlineShopers$SpecialDay,DataOnlineShopers$Revenue)
table(DataOnlineShopers$SpecialDay,DataOnlineShopers$Revenue)/lenght(DataOnlineShopers)
table(DataOnlineShopers$SpecialDay,DataOnlineShopers$Revenue)/length(DataOnlineShopers)
length(DataOnlineShopers)
length(DataOnlineShopers)
table(DataOnlineShopers$SpecialDay,DataOnlineShopers$Revenue)/nrow(DatosOnlinesShopers)
table(DataOnlineShopers$SpecialDay,DataOnlineShopers$Revenue)/nrow(DataOnlineShopers)
hist(DataOnlineShopers$SpecialDay)
knitr::opts_chunk$set(echo = TRUE)
table(DataOnlineShopers$SpecialDay)/nrow(DataOnlineShopers)
hist(DataOnlineShopers$SpecialDay)
hist(DataOnlineShopers$Month)
ggplot(data=DataOnlineShopers,aes(x=Month,fill=Survived))+geom_bar()
library(ggplot2)
library(dplyr)
##### Month
```{r}
ggplot(data=DataOnlineShopers,aes(x=Month,fill=Survived))+geom_bar()
```
ggplot(data=DataOnlineShopers,aes(x=Month,fill=Survived))+geom_bar()
ggplot(data=DataOnlineShopers,aes(x=Month,fill=Revenue))+geom_bar()
# Factorización y ordenación de los datos de de Month
is.factor(DataOnlineShopers$Month)
levels(DataOnlineShopers$Month)
as.factor(DataOnlineShopers$Month)
levesl(DataOnlineShopers$Month)
levels(DataOnlineShopers$Month)
as.factor(DataOnlineShopers$Month)
levels(as.factor(DataOnlineShopers$Month))
# Factorización y ordenación de los datos de de Month
DataOnlineShopers_BK <- DataOnlineShopers
levels = levels(as.factor(DataOnlineShopers$Month))[c(3,6,7,5,4,1,10,9,8,2)]
levels
DataOnlineShopers$Month <- is.factor(DataOnlineShopers$Month, levels = levels)
DataOnlineShopers$Month <- is.factor(DataOnlineShopers$Month, levels = levels(levels))
DataOnlineShopers$Month <- is.factor(DataOnlineShopers$Month, levels = levels(as.factor(DataOnlineShopers$Month))[c(3,6,7,5,4,1,10,9,8,2)])
DataOnlineShopers$Month <- is.factor(DataOnlineShopers$Month, levels = levels((DataOnlineShopers$Month))[c(3,6,7,5,4,1,10,9,8,2)])
DataOnlineShopers$Month <- factor(DataOnlineShopers$Month, levels = levels(DataOnlineShopers$Month)[c(3,6,7,5,4,1,10,9,8,2)])
is.factor(DataOnlineShopers$Month)
ggplot(data=DataOnlineShopers,aes(x=Month,fill=Revenue))+geom_bar()
View(DataOnlineShopers)
View(DataOnlineShopers_BK)
DataOnlineShopers <- DataOnlineShopers_BK
View(DataOnlineShopers)
DataOnlineShopers$Month <- factor(DataOnlineShopers$Month, levels = levels(DataOnlineShopers$Month)[c(3,6,7,5,4,1,10,9,8,2)])
is.factor(DataOnlineShopers$Month)
ggplot(data=DataOnlineShopers,aes(x=Month,fill=Revenue))+geom_bar()
DataOnlineShopers <- DataOnlineShopers_BK
DataOnlineShopers$Month <- as.factor(DataOnlineShopers$Month )
levels(DataOnlineShopers$Month)
DataOnlineShopers$Month <- factor(DataOnlineShopers$Month, levels = levels(DataOnlineShopers$Month)[c(3,6,7,5,4,1,10,9,8,2)])
is.factor(DataOnlineShopers$Month)
ggplot(data=DataOnlineShopers,aes(x=Month,fill=Revenue))+geom_bar()
table(DataOnlineShopers$VisitorType
table(DataOnlineShopers$VisitorType)
table(DataOnlineShopers$VisitorType)
table(DataOnlineShopers$VisitorType)
ggplot(data=DataOnlineShopers,aes(x=VisitorType,fill=Revenue))+geom_bar()
knitr::opts_chunk$set(echo = TRUE)
# Cargamos los paquetes R que vamos a usar
library(ggplot2)
# Cargamos los paquetes R que vamos a usar
library(ggplot2)
library(dplyr)
table(DataOnlineShopers$VisitorType,DataOnlineShopers$Revenue)
