for(i in 1:10){
if(i%%2==0){
cat("\n El numero ", i,"es par")
}else{
cat("\n El numero ", i,"es impar")
}
}
for(i in 1:10){
if(i%%2==0){
cat("\n El numero ", i,"es par")
}else{
print("\n El numero ", i,"es impar")
}
}
if(i%%2==0){
cat("\n El numero ", i,"es par")
}else{
cat("\n El numero ", i,"es impar")
}
if(i%%2==0){
cat("\n El numero ", i,"es par")
}else{
cat("\n El numero ", i,"es impar")
}
for(i in 1:10){
if(i%%2==0){
cat("\n El numero ", i,"es par")
}else{
cat("\n El numero ", i,"es impar")
}
}
# ASí se crea un vector que es como una lista. la C hace referencia a que son como columnas y así le decimos que queremos crear un vector
vector <- c("Maria", "Rodrigo", "Juan", "Pedro")
vector[1] # A diferencia que en Python las listas empiezan con 1 y no con 0
genero <- c("h","m","m","h","m","h","m","h","m","m")
edad <- c(23,23,34,39,60,52,44,59,32,40)
altura <- c(120,130,145,150,123,178,152,167,198,200)
x<-seq(-3,3,0.01)
plot(x,x^2+1,col="red", main="Funcion seno", xlab="Eje X", ylab = "Eje y", col.main="blue",col.lab="green")
barplot(c(2,5,10), main="Barras", # con barplot se hace una gráfica de barras
xlab="X axis title",
ylab="Y axis title",
sub="Sub-title")
data(iris)
attach(iris)
data(iris)
attach(iris)
# hemos generado un dataframe que ya existia en R, iris
names(iris) # as? vemos el nombre las columnas
head(iris) # as? apare?en las primeras l?neas
head(iris,12) # tambi?n podemos indicarle el n?mero de lineas que queremos que muestre, en este caso 12.
tail(iris) # tail es el contrario que head
dim(iris) # nos dice el n?mero de filas y columnas del dataframe
summary(iris) # ?os muestra un resumen de los valores que ocntiene, con cuartiles, media, etc.
# se pueden hacer operaciones con las variables de un dataframe
table(iris$Species) # con Table nos muestra una table con los valores que distribuyen a una variable.
# se pueden hacer operaciones con las variables de un dataframe
table(iris$Species) # con Table nos muestra una table con los valores que distribuyen a una variable.
table(Species)
table(Species)/length(Species) #Lenght es el tamaño de la muestra de una determinada variable.
prop.table(table(Species))*100 #prop hace el promedio
# podemos cre?r una lsita o vector y operar:
vec <- c(0,1,0,3,0,2,3,4,0,2)
table(vec)
table(vec)
# se pueden hacer operaciones con las variables de un dataframe
table(iris$Species) # con Table nos muestra una table con los valores que distribuyen a una variable.
table(Species)
vec <- rnorm(1,20,10) # esta formula incluye el numero de variables, la media y la desviaci?n. Así se crea un vector
quantile(Sepal.Length,seq(0,1,0.25)) # As? es como se hacer los quartiles de una varia?le
quantile(Sepal.Length,seq(0,1,0.1)) #deciles
quantile(Sepal.Length,seq(0,1,0.01)) # percentiles
NewIRIS_C <- iris %>% group_by(Species) %>% sum(Sepal.Length)
# esta libraria incluye funcionalidades que ayudan mucho a la hora de trabajar con dataframe,
#por ejemplo inlcuye una funci?n de filtro
library(dplyr) # h?y que ver aqu? como instalar la funci?n pipe para poder usar este simbolo %>%
# esta libraria incluye funcionalidades que ayudan mucho a la hora de trabajar con dataframe,
#por ejemplo inlcuye una funci?n de filtro
library(dplyr) # h?y que ver aqu? como instalar la funci?n pipe para poder usar este simbolo %>%
install.packages("dplyr")
# esta libraria incluye funcionalidades que ayudan mucho a la hora de trabajar con dataframe,
#por ejemplo inlcuye una funci?n de filtro
library(dplyr) # h?y que ver aqu? como instalar la funci?n pipe para poder usar este simbolo %>%
virginica <- filter(iris,Species=="virginica") # podemos crear una lista que incluya solo las especies virginica
no_virginica <- filter(iris,Species!="virginica") # o con las qu? no son virginica
table(virginica$Species)
virginica <- iris %>% filter(Species=="virginica")
no_virginica <- iris %>% filter(Species=="virginica" & Petal.Width>2.1) # para a?adir dos condiciones se hace con &
no_virginica <- iris %>% filter(Species=="vi?ginica" | Petal.Width>2.1) #si queremos que sea una condicion u otra se hace con |
no_virginica <- iris %>% filter(Species %in% c("setosa","virginica"))
seleccion <- iris %>% select(Sepal.Length,Sepal.Width,Petal.Length)
seleccion <- iris %>% select(Sepal.Length,Sepal.Width,Petal.Length) %>%
filter(Sepal.Length<5.1) %>% select(Sepal.Width)
NewIRIS_C <- iris %>% group_by(Species) %>% sum(Sepal.Length)
NewIRIS_G <- iris %>% mutate(Gran_mitad=Sepal.Width>0.5*Sepal.Length) %>% group_by(Gran_mitad) %>% count()
View(NewIRIS_G)
ruta_datos <- "clara@Enterprise:~/neoland/07. Clases y apuntes R/Vino_dataset"
list.files(ruta_datos) #Esto es para ver los archivos y carpetas que hay en el fichero
list.files(ruta_datos) #Esto es para ver los archivos y carpetas que hay en el fichero
list.files(ruta_datos, recursive=T) # si podemos lo de recursivo busca en las subcarpetas que tenemos en dicha ruta puede ser F(false) o T(True)
ruta_datos <- "/home/clara/neoland/07. Clases y apuntes R/Vino_dataset"
list.files(ruta_datos) #Esto es para ver los archivos y carpetas que hay en el fichero
list.files(ruta_datos, recursive=T) # si podemos lo de recursivo busca en las subcarpetas que tenemos en dicha ruta puede ser F(false) o T(True)
read.table("/home/clara/neoland/07. Clases y apuntes R/Vino_dataset/wine.data", sep=",") # sirve para ver los ficheros
read.table("/home/clara/neoland/07. Clases y apuntes R/Vino_dataset/wine.data", sep=",") # sirve para ver los ficheros
read.table(file.path(ruta_datos,"wine.data"), sep=",") #  Otra vforma de ver los datos
#hacemos un df de la table visualizada
df=read.table(file.path(ruta_datos,"wine.data"), sep=",")
# en este caso los nombres no se visualizan en los datos
nombres=read.table(file.path(ruta_datos,"wine.names"), sep="") # De esta forma daba error
nombres <- c("ID","Alcohol","Malic acid","Ash","Alcalinity of ash","Magnesium","Total phenols","Flavanoids","Nonflavanoid phenols","Proanthocyanins","Color intensity","Hue","diluted wines","Proline")
print(nombres)
names(df)=nombres # Con names, se asignan nombres a las columnas en este caso le asignamos "nombres" que es el vector que hemos creado antes
View(df)
table(df$ID)
df_ID = table(df$ID) # Aquí lo que hacemos es que nos diga cuantas observaciones hay de la varible que le digamos
clase1 <- filter(df,ID=="1")
clase2 <- filter(df,ID=="2")
clase3 <- filter(df,ID=="3")
# hacer filtros
df[df$Alcohol > 14.7,]
quantile(df$Alcohol,seq(0,1,0.25)) #cuartil del alcohol
mean(df$Alcohol,group_by(df$ID)) # Intentar sacar la media de alcohool por ID
# despues asignamos el nombre a esos minidataframes
clase1$Color_w = "Blanco"
clase2$Color_w = "Tinto"
clase3$Color_w = "Rosado"
View(clase1)
# finalmente añadimos las columnas
df1 <- rbind(clase1,clase2,clase3)
View(df1)
# Podemos borrar los dataframes que ya hemos añadido
rm(clase1,clase2,clase3)
df1 <- df %>% mutate(color_w = if_else (ID==1,"Blanco",
ifelse(ID==2,"Tinto",
"Rosado")))
View(df1)
df1 %>% group_by(color_w) %>% summarise(mean(Alcohol)) # Intentar sacar la media de alcohool por ID
vector_numerico <- c(1, 10, 49)
vector_caracter <- c("a", "b", "c")
# Completa el código para vector_logico
vector_logico <- c(TRUE, FALSE, TRUE)
# Resultados en la mesa de poker en la semana
vector_poker <- c(140, -50, 20, -120, 240)
# Resultados en la ruleta en la semana
vector_ruleta <- c(-24, -50, 100, -350, 10)
# Creamos un vector con los días de la semana
dias_semana = c("Lunes", "Martes", "Miercoles", "Jueves", "Viernes")
# Asignamos los nombres a los dos vectores de poker y ruletas
names(vector_poker) <- dias_semana
names(vector_ruleta) <- dias_semana
# Imprimimos los resultados
vector_ruleta
vector_poker
# Alternativa - Asignar los nombres a los valores del vector_poker
names(vector_poker) <- c("Lunes", "Martes", "Miercoles", "Jueves", "Viernes")
vector_poker
#  Creamos un vector númerico 4,5,6 llamado vector_B
vector_B <- c(4, 5, 6)
# Realizamos la suma del vector_B y vector_numerico
vector_B + vector_numerico
# Calculando las ganancias/pérdidas diarias:
total_diario <- vector_poker + vector_ruleta
total_diario
# Ganaste o perdiste durante la semana al poker?
vector_poker
total_poker = sum(vector_poker)
total_poker
# Ganaste o perdiste durante la semana a la ruleta?
total_ruleta = sum(vector_ruleta)
total_ruleta
#ganancias en el poker son más altas que en la ruleta:
comparativa <- total_poker > total_ruleta
# Visualizamos solo los datos del martes, miércoles y jueves
vector_poker[c(2,3,4)]
# Visualizamos solo los datos del martes, miercoles y jueves
vector_poker[c(2:4)]
# Visualizamos los datos excepto el lunes
vector_poker[c(-1)]
# Visualizamos solo los datos del jueves y viernes
vector_poker[c(4:5)]
# Visualizamos solo los datos del jueves y viernes
vector_poker[c(4,5)]
# Promedio de la ruleta
promedio_ruleta = mean(vector_ruleta)
# Promedio de la ruleta miercoles, jueves, viernes
promedio_ultimos_3dias <- mean(vector_ruleta[c(3:5)])
promedio_ultimos_3dias
# Que días obtuviste ganancias en el poker?
positivos_poker <- vector_poker > 0
positivos_poker
# Que días obtuviste ganancias en el ruleta?
positivos_ruleta <- vector_ruleta > 0
positivos_ruleta
# Selecciona los valores de vector_ruleta que fueron ganancias
ganancias_ruleta <- vector_ruleta[positivos_ruleta]
ganancias_ruleta
ganancias_ruleta
matrix(1:9, byrow = TRUE, nrow = 3)
# Taquilla de Star Wars: En Millones de dólares (USD)!
# Primer elemento taquilla en EEUU, segundo taquilla fuera de EEUU.
new_hope <- c(460.998, 314.400)
empire_strikes <- c(290.475, 247.900)
return_jedi <- c(309.306, 165.800)
# Agrega el código para construir la matriz
star_wars_matrix <- matrix(c(new_hope, empire_strikes, return_jedi), byrow = TRUE, nrow = 3)
# Evaluamos si es una matriz
is.matrix(star_wars_matrix)
# Convertimos si es una matriz
as.matrix(star_wars_matrix)
View(star_wars_matrix)
# Suma de taquillas
taquilla_mundial <- rowSums(star_wars_matrix)
taquilla_mundial
matriz_grande <- cbind(star_wars_matrix, taquilla_mundial)
matriz_grande
vector_nombres_col <- c("EEUU","no-EEUU", "taquilla mundial")
colnames(matriz_grande) <- vector_nombres_col
matriz_grande
# Construye la primera matriz
taquillas <- c(461, 314.4, 290.5, 247.9, 309.3, 165.8)
nombres <- c("A New Hope","The Empire Strikes Back","Return of the Jedi")
nombres_columnas <- c("EEUU","no-EEUU")
star_wars_matrix <- matrix(taquillas, nrow = 3, byrow = TRUE, dimnames = list(nombres, nombres_columnas))
#  Construye la segunda matriz
taquillas2 <- c(474.5, 552.5, 310.7, 338.7, 380.3, 468.5)
nombres2 <- c("The Phantom Menace", "Attack of the Clones", "Revenge of the Sith")
star_wars_matrix2 <- matrix(taquillas2, nrow=3, byrow = TRUE, dimnames = list(nombres2, nombres_columnas))
View(star_wars_matrix)
View(star_wars_matrix)
View(star_wars_matrix2)
View(star_wars_matrix2)
# Combina ambas trilogías en una sola matriz
todas_star_wars <- rbind(star_wars_matrix, star_wars_matrix2)
View(todas_star_wars)
# Total de taquilla para EEUU y no-EEUU
taquilla_por_region <- colSums(todas_star_wars)
taquilla_por_region
# Promedio para la región no-EEUU
promedio_noEEUU  <- mean(star_wars_matrix[,2])
promedio_EEUU <- mean(star_wars_matrix[1:2,1])
# Estimación de entradas vendidas
entradas <- star_wars_matrix/5
# Imprime entradas a la consola
entradas
precios <- matrix(c(5, 5, 6, 6, 7, 7), nrow = 3, byrow = TRUE, dimnames = list(nombres, nombres_columnas))
# Número de entradas vendidas
entradas <- star_wars_matrix / precios
# Número promedio de entradas vendidas en EEUU
entradas_promedio_EEUU <- mean(entradas[,1])
# Número promedio de entradas vendidas fuera de EEUU
entradas_promedio_noEEUU <- mean(entradas[,2])
# Número de entradas vendidas
entradas <- star_wars_matrix / precios
View(entradas)
View(entradas)
