if (nba$Position[i] %in% Forward){
nba$Position[i] = "Forward"
} else if (nba$Position[i] %in% Guard){
nba$Position[i] = "Guard"
} else if (nba$Position[i] == "PG"){
nba$Position[i] = "Point Guard"
} else if (nba$Position[i] == "SG"){
nba$Position[i] = "Shooting Guard"
} else if (nba$Position[i] == "SF"){
nba$Position[i] = "Small Forward"
} else if (nba$Position[i] == "PF"){
nba$Position[i] = "Power Forward"
} else if (nba$Position[i] == "C"){
nba$Position[i] = "center"
}
}
table(nba$Position)
table(nba$Position)
# la posición con más jugadores es la de Guard
unique(nba$Team)
# Hay 35 equipos distintos
length(unique(nba$Team))
sort(table(nba$Team), decreasing = TRUE)[1:5]
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE) # uso la funcion distinct con keep_all = True para que mantenga el ersto de variables. Ha cogido la primera aparición de cada valor.
nba.unique$Player <- as.character(nba.unique$Player)
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:10],5:6] # uso la función order para que me ordene height de menor a mayor y me cree un nuevo DF con las 10 primeras filas y las columnas 5 (altura) y 6 (jugador)
top10_jugadores_bajos
top10_jugadores_altos <- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:10],5:6]# uso la función order para que me ordene height de mayor a menor y me cree un nuevo DF con las 10 primeras filas y las columnas 5 (altura) y 6 (jugador)
top10_jugadores_altos
boxplot(nba.unique$Weight) # Observo en el Boxplot que hay dos valores fuera de los cuartiles.
table(nba.unique$Weight) # veo en que los mayores valores son 310 y 325. Son los que voy a eliminar.
nba.avg <- nba.unique[nba.unique$Weight < 308, ] # genero el nuevo DF con un filtro que elimne todas las filas con un valor de Weight mayor que 300.
boxplot(nba.unique$Weight)
boxplot(nba.avg$Weight)
summary(nba.unique$Weight)
summary(nba.avg$Weight)
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_Altos<- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:50],6]
nba_pruebas <- nba
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_Altos){
nba$Altura[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_bajos){
nba$Altura[i] = "bajo"
} else {nba$Altura[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_Altos){
nba.unique$Altura[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_bajos){
nba.unique$Altura[i] = "bajo"
} else {nba.unique$Altura[i] = "normal"}
}
nba_backup <- nba
top50_jugadores_delgados <- nba.unique[order(nba.unique$Weight)[1:50],6]
top50_jugadores_gordos<- nba.unique[order(nba.unique$Weight, decreasing = TRUE)[1:50],6]
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_gordos){
nba$Peso[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_delgados){
nba$Peso[i] = "bajo"
} else {nba$Peso[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_gordos){
nba.unique$Peso[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_delgados){
nba.unique$Peso[i] = "bajo"
} else {nba.unique$Peso[i] = "normal"}
}
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
nba.unique_pruebas <- nba.unique
nba.unique$Altura <- factor(nba.unique$Altura, levels = levels(nba.unique$Altura)[c(2,3,1)] )
is.factor(nba.unique$Altura)
boxplot(nba.unique$Weight ~ nba.unique$Altura)
jugadores_alturanormal_pesoalto <- nba.unique[nba.unique$Altura == "normal" & nba.unique$Peso == "alto",6 ]
jugadores_alturanormal_pesoalto
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
top50_jugadores_delgados <- nba.unique[order(nba.unique$Weight)[1:50],6]
top50_jugadores_gordos<- nba.unique[order(nba.unique$Weight, decreasing = TRUE)[1:50],6]
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_gordos){
nba$Peso[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_delgados){
nba$Peso[i] = "bajo"
} else {nba$Peso[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_gordos){
nba.unique$Peso[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_delgados){
nba.unique$Peso[i] = "bajo"
} else {nba.unique$Peso[i] = "normal"}
}
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
top50_jugadores_delgados <- nba.unique[order(nba.unique$Weight)[1:50],6]
top50_jugadores_gordos<- nba.unique[order(nba.unique$Weight, decreasing = TRUE)[1:50],6]
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_gordos){
nba$Peso[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_delgados){
nba$Peso[i] = "bajo"
} else {nba$Peso[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_gordos){
nba.unique$Peso[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_delgados){
nba.unique$Peso[i] = "bajo"
} else {nba.unique$Peso[i] = "normal"}
}
View(nba.unique_pruebas)
View(nba.unique)
View(nba.unique)
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_Altos<- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:50],6]
nba_pruebas <- nba
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_Altos){
nba$Altura[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_bajos){
nba$Altura[i] = "bajo"
} else {nba$Altura[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_Altos){
nba.unique$Altura[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_bajos){
nba.unique$Altura[i] = "bajo"
} else {nba.unique$Altura[i] = "normal"}
}
nba_backup <- nba
View(nba.unique)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
nba<-read.csv("/home/enrique/neoland/NEOLAND-DS2020-datalabs/01-intro-101/r-rstudio/practices/02-EDA-NBA/NBA_player_of_the_week.csv",header = TRUE)
class(nba)
str(nba)
head(nba)
ls(nba)
names(nba)
row.names(nba)
levels(nba$Conference)
conf<-(nba$Conference)
conf
conf[conf == ""] <- NA
str(conf)
table(conf)
nba$Conference <- as.factor(nba$Conference)
table(nba$Conference)
# en la tabla de frecuencia vemos como hay 384 valores ausentes
sum(nba$Conference == "") # Otra forma alternativa de hacerlo es así
# Al ser diferentes valores, ejecuto la orden con un for.
cols <- c("Height",
"Player",
"Position",
"Season",
"Team",
"Weight")
for (i in cols){
nba[,i] = as.factor(nba[,i])
}
colSums(is.na(nba))  # primero voy a comprobar si hay valores na o vacios en el dataframe
colSums(nba == "")
# En principio solameente la variable Conference tiene valores vacios.
levels(nba$Height) # saco las etiquetas del resto de variables para ver si hay alguno perdido
levels(nba$Player)
levels(nba$Position)
levels(nba$Season)
levels(nba$Team)
levels(nba$Weight)
nba$tiempo <- nba$Season.short - nba$Draft.Year
table(nba$tiempo)
# el valor más repetido es 7, por tanto la moda es 7 años.
# Buscar como hacer para que me busque dentro de Height los valores que contienen - y haga la conversión (1 pie son 30.48 cm y 1 pulgada son 2.54 cms) y los que tenga cm, me elimine el cm para quedarme con los cm
nba_pruebas <- nba # he creado uno DF para pruebas
nba_backup <- nba # creo también una copia de seguridad para evitar errores
eliminador_cm <- function(y){
gsub("cm", "", y) #Eliminar los CM con la función gsub
}
convertidor_cm <- function(x){ # convierto las pulgadas en cm. uso strsplit para partir el valor, por ejemplo 6-7, lo divide en 6 y 7 y multiplico los pies por 30.48 y las pulgadas por 2.54. he tenido que usar la función unlist porque el valor que devuelve strsplit es una lista. Una vez opeado lo convierto en integer para operar y posteriormento en character que era como estaba
as.character(as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[1]*30.48 + as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[2]*2.54)
}
nba$Height <- as.character(nba$Height) #transformo en character la dimensión Height
is.character(nba$Height)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("-",nba$Height[i]) == 1){ # si contiene "-" aplica la funcion convertidor_cm
nba$Height[i] = convertidor_cm(nba$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1) # si contiene cm aplica la función eliminar_cm
{nba$Height[i] = eliminador_cm(nba$Height[i])}
}
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
eliminador_kg <- function(y){
gsub("kg", "", y) #Eliminar los KG con la función gsub
}
convertidor_libras<- function(x){ # Convierto el valor en kilos en libras multiplicando por 2.20462
as.integer(x)*2.20462
}
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight[i] = eliminador_kg(nba$Weight[i])
nba$Weight[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight[i] = nba$Weight[i] }
}
table(nba$Weight)
nba$Weight <- as.integer(nba$Weight) # Valor numérico
table(nba$Weight)
mean(nba$Weight)
sd(nba$Weight)
boxplot(nba$Weight, ylab = 'Peso de jugadores')
nba_pruebas <- nba_backup
Forward <- c("F","F-C","FC") # creo un vector con las posiciones de Forward
Guard <- c("G","G-F", "GF") # creo un vector con las posiciones de Guard
nba$Position <- as.character(nba$Position)
for (i in 1:nrow(nba)) { # ejecuto un for que recorra todas las lineas y por cada una evalue el valor de la variable posición y la cambie por el valor incicado.
if (nba$Position[i] %in% Forward){
nba$Position[i] = "Forward"
} else if (nba$Position[i] %in% Guard){
nba$Position[i] = "Guard"
} else if (nba$Position[i] == "PG"){
nba$Position[i] = "Point Guard"
} else if (nba$Position[i] == "SG"){
nba$Position[i] = "Shooting Guard"
} else if (nba$Position[i] == "SF"){
nba$Position[i] = "Small Forward"
} else if (nba$Position[i] == "PF"){
nba$Position[i] = "Power Forward"
} else if (nba$Position[i] == "C"){
nba$Position[i] = "center"
}
}
table(nba$Position)
table(nba$Position)
# la posición con más jugadores es la de Guard
unique(nba$Team)
# Hay 35 equipos distintos
length(unique(nba$Team))
sort(table(nba$Team), decreasing = TRUE)[1:5]
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE) # uso la funcion distinct con keep_all = True para que mantenga el ersto de variables. Ha cogido la primera aparición de cada valor.
nba.unique$Player <- as.character(nba.unique$Player)
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:10],5:6] # uso la función order para que me ordene height de menor a mayor y me cree un nuevo DF con las 10 primeras filas y las columnas 5 (altura) y 6 (jugador)
top10_jugadores_bajos
top10_jugadores_altos <- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:10],5:6]# uso la función order para que me ordene height de mayor a menor y me cree un nuevo DF con las 10 primeras filas y las columnas 5 (altura) y 6 (jugador)
top10_jugadores_altos
boxplot(nba.unique$Weight) # Observo en el Boxplot que hay dos valores fuera de los cuartiles.
table(nba.unique$Weight) # veo en que los mayores valores son 310 y 325. Son los que voy a eliminar.
nba.avg <- nba.unique[nba.unique$Weight < 308, ] # genero el nuevo DF con un filtro que elimne todas las filas con un valor de Weight mayor que 300.
boxplot(nba.unique$Weight)
boxplot(nba.avg$Weight)
summary(nba.unique$Weight)
summary(nba.avg$Weight)
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_Altos<- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:50],6]
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_Altos){
nba$Altura[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_bajos){
nba$Altura[i] = "bajo"
} else {nba$Altura[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_Altos){
nba.unique$Altura[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_bajos){
nba.unique$Altura[i] = "bajo"
} else {nba.unique$Altura[i] = "normal"}
}
View(nba.unique)
top50_jugadores_delgados <- nba.unique[order(nba.unique$Weight)[1:50],6]
top50_jugadores_gordos<- nba.unique[order(nba.unique$Weight, decreasing = TRUE)[1:50],6]
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_gordos){
nba$Peso[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_delgados){
nba$Peso[i] = "bajo"
} else {nba$Peso[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_gordos){
nba.unique$Peso[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_delgados){
nba.unique$Peso[i] = "bajo"
} else {nba.unique$Peso[i] = "normal"}
}
View(nba.unique)
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
nba.unique$Altura <- factor(nba.unique$Altura, levels = levels(nba.unique$Altura)[c(2,3,1)] )
is.factor(nba.unique$Altura)
boxplot(nba.unique$Weight ~ nba.unique$Altura)
boxplot(nba.unique$Weight~nba.unique$Altura)
View(nba.unique)
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_Altos){
nba.unique$Altura[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_bajos){
nba.unique$Altura[i] = "bajo"
} else {nba.unique$Altura[i] = "normal"}
}
View(nba.unique)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
nba<-read.csv("/home/enrique/neoland/NEOLAND-DS2020-datalabs/01-intro-101/r-rstudio/practices/02-EDA-NBA/NBA_player_of_the_week.csv",header = TRUE)
class(nba)
str(nba)
head(nba)
ls(nba)
names(nba)
row.names(nba)
levels(nba$Conference)
conf<-(nba$Conference)
conf
conf[conf == ""] <- NA
str(conf)
table(conf)
nba$Conference <- as.factor(nba$Conference)
table(nba$Conference)
# en la tabla de frecuencia vemos como hay 384 valores ausentes
sum(nba$Conference == "") # Otra forma alternativa de hacerlo es así
# Al ser diferentes valores, ejecuto la orden con un for.
cols <- c("Height",
"Player",
"Position",
"Season",
"Team",
"Weight")
for (i in cols){
nba[,i] = as.factor(nba[,i])
}
colSums(is.na(nba))  # primero voy a comprobar si hay valores na o vacios en el dataframe
colSums(nba == "")
# En principio solameente la variable Conference tiene valores vacios.
levels(nba$Height) # saco las etiquetas del resto de variables para ver si hay alguno perdido
levels(nba$Player)
levels(nba$Position)
levels(nba$Season)
levels(nba$Team)
levels(nba$Weight)
nba$tiempo <- nba$Season.short - nba$Draft.Year
table(nba$tiempo)
# el valor más repetido es 7, por tanto la moda es 7 años.
# Buscar como hacer para que me busque dentro de Height los valores que contienen - y haga la conversión (1 pie son 30.48 cm y 1 pulgada son 2.54 cms) y los que tenga cm, me elimine el cm para quedarme con los cm
nba_pruebas <- nba # he creado uno DF para pruebas
nba_backup <- nba # creo también una copia de seguridad para evitar errores
eliminador_cm <- function(y){
gsub("cm", "", y) #Eliminar los CM con la función gsub
}
convertidor_cm <- function(x){ # convierto las pulgadas en cm. uso strsplit para partir el valor, por ejemplo 6-7, lo divide en 6 y 7 y multiplico los pies por 30.48 y las pulgadas por 2.54. he tenido que usar la función unlist porque el valor que devuelve strsplit es una lista. Una vez opeado lo convierto en integer para operar y posteriormento en character que era como estaba
as.character(as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[1]*30.48 + as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[2]*2.54)
}
nba$Height <- as.character(nba$Height) #transformo en character la dimensión Height
is.character(nba$Height)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("-",nba$Height[i]) == 1){ # si contiene "-" aplica la funcion convertidor_cm
nba$Height[i] = convertidor_cm(nba$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1) # si contiene cm aplica la función eliminar_cm
{nba$Height[i] = eliminador_cm(nba$Height[i])}
}
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
eliminador_kg <- function(y){
gsub("kg", "", y) #Eliminar los KG con la función gsub
}
convertidor_libras<- function(x){ # Convierto el valor en kilos en libras multiplicando por 2.20462
as.integer(x)*2.20462
}
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight[i] = eliminador_kg(nba$Weight[i])
nba$Weight[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight[i] = nba$Weight[i] }
}
table(nba$Weight)
nba$Weight <- as.integer(nba$Weight) # Valor numérico
table(nba$Weight)
mean(nba$Weight)
sd(nba$Weight)
boxplot(nba$Weight, ylab = 'Peso de jugadores')
nba_pruebas <- nba_backup
Forward <- c("F","F-C","FC") # creo un vector con las posiciones de Forward
Guard <- c("G","G-F", "GF") # creo un vector con las posiciones de Guard
nba$Position <- as.character(nba$Position)
for (i in 1:nrow(nba)) { # ejecuto un for que recorra todas las lineas y por cada una evalue el valor de la variable posición y la cambie por el valor incicado.
if (nba$Position[i] %in% Forward){
nba$Position[i] = "Forward"
} else if (nba$Position[i] %in% Guard){
nba$Position[i] = "Guard"
} else if (nba$Position[i] == "PG"){
nba$Position[i] = "Point Guard"
} else if (nba$Position[i] == "SG"){
nba$Position[i] = "Shooting Guard"
} else if (nba$Position[i] == "SF"){
nba$Position[i] = "Small Forward"
} else if (nba$Position[i] == "PF"){
nba$Position[i] = "Power Forward"
} else if (nba$Position[i] == "C"){
nba$Position[i] = "center"
}
}
table(nba$Position)
table(nba$Position)
# la posición con más jugadores es la de Guard
unique(nba$Team)
# Hay 35 equipos distintos
length(unique(nba$Team))
sort(table(nba$Team), decreasing = TRUE)[1:5]
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE) # uso la funcion distinct con keep_all = True para que mantenga el ersto de variables. Ha cogido la primera aparición de cada valor.
nba.unique$Player <- as.character(nba.unique$Player)
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:10],5:6] # uso la función order para que me ordene height de menor a mayor y me cree un nuevo DF con las 10 primeras filas y las columnas 5 (altura) y 6 (jugador)
top10_jugadores_bajos
top10_jugadores_altos <- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:10],5:6]# uso la función order para que me ordene height de mayor a menor y me cree un nuevo DF con las 10 primeras filas y las columnas 5 (altura) y 6 (jugador)
top10_jugadores_altos
boxplot(nba.unique$Weight) # Observo en el Boxplot que hay dos valores fuera de los cuartiles.
table(nba.unique$Weight) # veo en que los mayores valores son 310 y 325. Son los que voy a eliminar.
nba.avg <- nba.unique[nba.unique$Weight < 308, ] # genero el nuevo DF con un filtro que elimne todas las filas con un valor de Weight mayor que 300.
boxplot(nba.unique$Weight)
boxplot(nba.avg$Weight)
summary(nba.unique$Weight)
summary(nba.avg$Weight)
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_Altos<- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:50],6]
nba_pruebas <- nba
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_Altos){
nba$Altura[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_bajos){
nba$Altura[i] = "bajo"
} else {nba$Altura[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_Altos){
nba.unique$Altura[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_bajos){
nba.unique$Altura[i] = "bajo"
} else {nba.unique$Altura[i] = "normal"}
}
nba_backup <- nba
View(nba.unique)
nba.unique_pruebas <- nba.unique
View(nba.unique)
top50_jugadores_delgados <- nba.unique[order(nba.unique$Weight)[1:50],6]
top50_jugadores_gordos<- nba.unique[order(nba.unique$Weight, decreasing = TRUE)[1:50],6]
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_gordos){
nba$Peso[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_delgados){
nba$Peso[i] = "bajo"
} else {nba$Peso[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_gordos){
nba.unique$Peso[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_delgados){
nba.unique$Peso[i] = "bajo"
} else {nba.unique$Peso[i] = "normal"}
}
nba.unique_pruebas <- nba.unique
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, levels = levels(nba.unique_pruebas$Altura)[c(2,3,1)] )
View(top10_jugadores_altos)
View(nba.unique_pruebas)
is.factor(nba.unique_pruebas$Altura)
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, levels = levels(nba.unique_pruebas$Altura)[c(2,3,1)])
nba.unique_pruebas <- nba.unique
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, levels = levels(nba.unique_pruebas$Altura)[c(2,3,1)])
View(nba.unique_pruebas)
nba.unique_pruebas <- nba.unique
View(nba.unique_pruebas)
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, labels = levels(nba.unique_pruebas$Altura)[c(2,3,1)])
is.factor(nba.unique_pruebas$Altura)
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, levels(nba.unique_pruebas$Altura)[c(2,3,1)])
nba.unique_pruebas <- nba.unique
is.factor(nba.unique_pruebas$Altura)
levels(nba.unique_pruebas)
levels(nba.unique_pruebas$Altura)
View(nba.unique_pruebas)
nba.unique_pruebas$Altura <- as.factor(nba.unique_pruebas$Altura)
is.factor(nba.unique_pruebas$Altura)
levels(nba.unique_pruebas$Altura))
levels(nba.unique_pruebas$Altura)
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, levels = levels(nba.unique_pruebas$Altura)[c(2,3,1)])
View(nba.unique_pruebas)
is.factor(nba.unique_pruebas$Altura)
boxplot(nba.unique$Weight~nba.unique$Altura)
boxplot(nba.unique_pruebas$Weight~nba.unique_pruebas$Altura)
nba.unique_pruebas <- nba.unique
nba.unique$Altura <- as.factor(nba.unique$Altura) #convierto altura en factor
is.factor(nba.unique$Altura)
levels(nba.unique$Altura)
nba.unique$Altura <- factor(nba.unique$Altura, levels = levels(nba.unique$Altura)[c(2,3,1)]) # ordeno los factores para que me muestre de más bajo a más alto
boxplot(nba.unique$Weight~nba.unique$Altura)
jugadores_alturanormal_pesoalto
jugadores_alturanormal_pesoalto <- nba.unique[nba.unique$Altura == "normal" & nba.unique$Peso == "alto",6 ]
jugadores_alturanormal_pesoalto
