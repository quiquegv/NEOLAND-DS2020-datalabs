colSums(nba == "")
# En principio solameente la variable Conference tiene valores vacios.
levels(nba$Height) # saco las etiquetas del resto de variables para ver si hay alguno perdido
levels(nba$Player)
levels(nba$Position)
levels(nba$Season)
levels(nba$Team)
levels(nba$Weight)
nba$tiempo <- nba$Season.short - nba$Draft.Year
table(nba$tiempo)
# el valor más repetido es 7, por tanto la moda es 7 años.
nba_pruebas <- nba
# Buscar como hacer para que me busque dentro de Height los valores que contienen - y haga la conversión (1 pie son 30.48 cm y 1 pulgada son 2.54 cms) y los que tenga cm, me elimine el cm para quedarme con los cm
eliminador_cm <- function(y){
gsub("cm", "", y) #Eliminar los CM con la función gsub
}
convertidor_cm <- function(x){ # convieerto las pulgadas en cm
as.character(as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[1]*30.48 + as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[2]*2.54)
}
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if (grep("-",nba_pruebas$Height[i]) == 1){
nba_pruebas$Height_nocm[i] = convertidor_cm(nba_pruebas$Height[i])}
if (grep("cm",nba_pruebas$Height[i]) == 1)
{nba_pruebas$Height_nocm[i] = eliminador_cm(nba_pruebas$Height[i])}
}
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if_else(grep("-", nba_pruebas$Height[i]) == 1,
nba_pruebas$Height_nocm[i] <- convertidor_cm(nba_pruebas$Height[i]),
nba_pruebas$Height_nocm[i] <- eliminador_cm(nba_pruebas$Height[i]))
}
View(nba_pruebas)
table(nba_pruebas$Height_nocm)
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if_else(grep("-", nba_pruebas$Height[i]) == 1,
nba_pruebas$Height_nocm[i] <- convertidor_cm(nba_pruebas$Height[i]),
"error")
}
View(nba_pruebas)
for (i in 1:nrow(nba_pruebas)){
if_else(grep("-", nba_pruebas$Height[i]) == 1,
nba_pruebas$Height_nocm[i] <- convertidor_cm(nba_pruebas$Height[i]),
nba_pruebas$Height_nocm[i] = eliminador_cm(nba_pruebas$Height[i]), missing = "Error")
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if_else(grep("-", nba_pruebas$Height[i]) == 1,
nba_pruebas$Height_nocm[i] <- convertidor_cm(nba_pruebas$Height[i]),
nba_pruebas$Height_nocm[i] = eliminador_cm(nba_pruebas$Height[i]), missing = "Error")
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if_else(grep("-", nba_pruebas$Height[i]) == 1,
nba_pruebas$Height_nocm[i] <- convertidor_cm(nba_pruebas$Height[i]),
nba_pruebas$Height_nocm[i] <- eliminador_cm(nba_pruebas$Height[i]), missing = "Error")
}
View(nba_pruebas)
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if (grep("-",nba_pruebas$Height[i]) == 1){
nba_pruebas$Height_nocm[i] = convertidor_cm(nba_pruebas$Height[i])}
if (grep("cm",nba_pruebas$Height[i]) == 1)
{nba_pruebas$Height_nocm[i] = eliminador_cm(nba_pruebas$Height[i])}
}
View(nba_pruebas)
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if_else(grep("cm", nba_pruebas$Height[i]) == 1,
nba_pruebas$Height_nocm[i] <- eliminador_cm(nba_pruebas$Height[i]),
nba_pruebas$Height_nocm[i] <- convertidor_cm(nba_pruebas$Height[i]))
}
View(nba_pruebas)
View(nba)
eliminador_cm(nba_pruebas$Height[1126])
convertidor_cm(nba_pruebas$Height[1126])
grep("-", nba_pruebas$Height[1126]
grep("-", nba_pruebas$Height[1126])
grep("-", nba_pruebas$Height[1126])
grep("-", nba_pruebas$Height[1126])
grep("-", nba_pruebas$Height[1126])
grep("-", nba_pruebas$Height[1])
grep("-", nba_pruebas$Height[1126]) == 0
grep("-", nba_pruebas$Height[1]) == 1
grep("cm", nba_pruebas$Height[1126]) == 1
nba_pruebas$Height_nocm[1126] <- eliminador_cm(nba_pruebas$Height[1126])
View(nba_pruebas)
nba_pruebas$Height_nocm[1] <- eliminador_cm(nba_pruebas$Height[1])
View(nba_pruebas)
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
nba_pruebas$Height_nocm[1126] <- eliminador_cm(nba_pruebas$Height[1126])
nba_pruebas$Height_nocm[1] <- eliminador_cm(nba_pruebas$Height[1])
nba_pruebas$Height_nocm[1126] <- eliminador_cm(nba_pruebas$Height[1126])
View(nba_pruebas)
nba_pruebas$Height_nocm[1] <- convertidor_cm(nba_pruebas$Height[1])
View(nba_pruebas)
grep("-", nba_pruebas$Height[1126]) == 1
grep("-", nba_pruebas$Height[1]) == 1
grep("-", nba_pruebas$Height[1126) == 1
grep("-", nba_pruebas$Height[1126) == 1
grep("-", nba_pruebas$Height[1126) == 1
grep("-", nba_pruebas$Height[1126]) == 1
grep("-", nba_pruebas$Height[1126], fixed = TRUE) == 1
nba_pruebas$Height_nocm[1126] <- eliminador_cm(nba_pruebas$Height[1126])
grep("-", nba_pruebas$Height[1], fixed = TRUE) == 1
grep("-", nba_pruebas$Height[1126], invert =  = TRUE) == 1
grep("-", nba_pruebas$Height[1126], invert = TRUE) == 1
nba_pruebas <- nba
grep("-", nba_pruebas$Height[1126], invert = TRUE) == 1
grep("-", nba_pruebas$Height[1], invert = TRUE) == 1
grepl("-", nba_pruebas$Height[1], invert = TRUE) == 1
grepl("-", nba_pruebas$Height[1]) == 1
grepl("-", nba_pruebas$Height[1126]) == 1
grepl("-", nba_pruebas$Height[1126]) == 1
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if_else(grepl("-", nba_pruebas$Height[i]) == 1,
nba_pruebas$Height_nocm[i] <- eliminador_cm(nba_pruebas$Height[i]),
nba_pruebas$Height_nocm[i] <- convertidor_cm(nba_pruebas$Height[i]))
}
View(nba_pruebas)
grepl("-", nba_pruebas$Height[1126]) == 1
nba_pruebas$Height_nocm[1126] <- eliminador_cm(nba_pruebas$Height[1126])
nba_pruebas$Height_nocm[1] <- convertidor_cm(nba_pruebas$Height[1])
nba_pruebas <- nba
nba_pruebas$Height <- as.character(nba_pruebas$Height)
is.character(nba_pruebas$Height)
for (i in 1:nrow(nba_pruebas)){
if (grepl("-",nba_pruebas$Height[i]) == 1){
nba_pruebas$Height_nocm[i] = convertidor_cm(nba_pruebas$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1)
{nba_pruebas$Height_nocm[i] = eliminador_cm(nba_pruebas$Height[i])}
}
View(nba_pruebas)
table(nba_pruebas$Height_nocm)
table(nba$Height)
table(nba_pruebas$Height_nocm)
table(nba$Height)
knitr::opts_chunk$set(echo = TRUE)
nba_backup <- nab
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
nba<-read.csv("/home/enrique/neoland/NEOLAND-DS2020-datalabs/01-intro-101/r-rstudio/practices/02-EDA-NBA/NBA_player_of_the_week.csv",header = TRUE)
class(nba)
str(nba)
head(nba)
ls(nba)
names(nba)
row.names(nba)
levels(nba$Conference)
conf<-(nba$Conference)
conf
conf[conf == ""] <- NA
str(conf)
table(conf)
nba$Conference <- as.factor(nba$Conference)
table(nba$Conference)
# en la tabla de frecuencia vemos como hay 384 valores ausentes
sum(nba$Conference == "") # Otra forma alternativa de hacerlo es así
# Al ser diferentes valores, ejecuto la orden con un for.
cols <- c("Height",
"Player",
"Position",
"Season",
"Team",
"Weight")
for (i in cols){
nba[,i] = as.factor(nba[,i])
}
colSums(is.na(nba))  # primero voy a comprobar si hay valores na o vacios en el dataframe
colSums(nba == "")
# En principio solameente la variable Conference tiene valores vacios.
levels(nba$Height) # saco las etiquetas del resto de variables para ver si hay alguno perdido
levels(nba$Player)
levels(nba$Position)
levels(nba$Season)
levels(nba$Team)
levels(nba$Weight)
nba$tiempo <- nba$Season.short - nba$Draft.Year
table(nba$tiempo)
# el valor más repetido es 7, por tanto la moda es 7 años.
# Buscar como hacer para que me busque dentro de Height los valores que contienen - y haga la conversión (1 pie son 30.48 cm y 1 pulgada son 2.54 cms) y los que tenga cm, me elimine el cm para quedarme con los cm
nba_pruebas <- nba # he creado uno DF para pruebas
nba_backup <- nab
nba_backup <- nba
eliminador_cm <- function(y){
gsub("cm", "", y) #Eliminar los CM con la función gsub
}
convertidor_cm <- function(x){ # convierto las pulgadas en cm. uso strsplit para partir el valor, por ejemplo 6-7, lo divide en 6 y 7 y multiplico los pies por 30.48 y las pulgadas por 2.54. he tenido que usar la función unlist porque el valor que devuelve strsplit es una lista. Una vez opeado lo convierto en integer para operar y posteriormento en character que era como estaba
as.character(as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[1]*30.48 + as.integer(unlist(strsplit(x,"-"), use.names = FALSE))[2]*2.54)
}
nba$Height <- as.character(nba$Height) #transformo en character la dimensión Height
is.character(nba$Height)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("-",nba$Height[i]) == 1){ # si contiene "-" aplica la funcion convertidor_cm
nba$Height[i] = convertidor_cm(nba$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1) # si contiene cm aplica la función eliminar_cm
{nba$Height[i] = eliminador_cm(nba$Height[i])}
}
table(nba$Height)
nba$Height <- as.integer(nba$Height)
table(nba$Height)
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
View(nba)
View(nba_pruebas)
eliminador_kg <- function(y){
gsub("kg", "", y) #Eliminar los KG con la función gsub
}
convertidor_libras<- function(x){ # Convierto el valor en kilos en libras multiplicando por 2.20462
as.integer(x)*2.20462
}
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba_pruebas)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba_pruebas$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
eliminador_kg(nba_pruebas$Weight[i])
nba_pruebas$Weight[i] = convertidor_libras(nba_pruebas$Weight[i])}
else {nba_pruebas$Weight[i]}
}
View(nba_pruebas)
table(nba_pruebas$Weight)
nba_pruebas <- nba
nba_pruebas <- nba
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba_pruebas)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba_pruebas$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba_pruebas$Weight1[i] = eliminador_kg(nba_pruebas$Weight[i])
nba_pruebas$Weight1[i] = convertidor_libras(nba_pruebas$Weight[i])}
else {nba_pruebas$Weight1[i] = nba_pruebas$Weight[i] }
}
table(nba_pruebas$Weight)
table(nba_pruebas$Weight1)
table(nba_pruebas$Weight1)
table(nba_pruebas$Weight)
str(nba_pruebas)
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight1[i] = eliminador_kg(nba$Weight[i])
nba$Weight1[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight1[i] = nba$Weight[i] }
}
View(nba_backup)
nba <- nba_backup
nba$Height <- as.character(nba$Height) #transformo en character la dimensión Height
is.character(nba$Height)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("-",nba$Height[i]) == 1){ # si contiene "-" aplica la funcion convertidor_cm
nba$Height[i] = convertidor_cm(nba$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1) # si contiene cm aplica la función eliminar_cm
{nba$Height[i] = eliminador_cm(nba$Height[i])}
}
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
mean(nba$Height)
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight[i] = eliminador_kg(nba$Weight[i])
nba$Weight[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight[i] = nba$Weight[i] }
}
table(nba$Weight)
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
nba$Height <- as.integer(nba$weight) # Valor numérico
nba$Height <- as.integer(nba$Weight) # Valor numérico
nba$Weight <- as.integer(nba$Weight) # Valor numérico
table(nba$Weight)
mean(nba$Weight)
sd(nba$Weight)
boxplot(nba$Weight, ylab = 'Peso de jugadores')
View(nba)
nba <- nba_backup
nba$Height <- as.character(nba$Height) #transformo en character la dimensión Height
is.character(nba$Height)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("-",nba$Height[i]) == 1){ # si contiene "-" aplica la funcion convertidor_cm
nba$Height[i] = convertidor_cm(nba$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1) # si contiene cm aplica la función eliminar_cm
{nba$Height[i] = eliminador_cm(nba$Height[i])}
}
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight[i] = eliminador_kg(nba$Weight[i])
nba$Weight[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight[i] = nba$Weight[i] }
}
table(nba$Weight)
nba$Weight <- as.integer(nba$Weight) # Valor numérico
table(nba$Weight)
mean(nba$Weight)
sd(nba$Weight)
boxplot(nba$Weight, ylab = 'Peso de jugadores')
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in i:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
Forward <- c("F","F-C","FC")
Guard <- c("G","G-F", "GF")
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in i:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
View(nba_pruebas)
for (i in 1:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
for (i in 1:nrow(nba_pruebas)) {
ifelse (nba_pruebas$Position %in% Forward){
for (i in 1:nrow(nba_pruebas)) {
ifelse (nba_pruebas$Position %in% Forward){
nba_pruebas <- nba_backup
table(nba_pruebas$Position)
info(nba_pruebas$Position)
library(dplyr)
Forward <- c("F","F-C","FC")
Guard <- c("G","G-F", "GF")
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in 1:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
nba_pruebas <- nba_backup
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in 1:nrow(nba_pruebas)) {
if (nba_pruebas$Position[i] %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position[i] %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position[i] == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position[i] == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position[i] == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position[i] == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position[i] == "C"){
nba_pruebas$Position_[i] = "center"
}
}
View(nba_pruebas)
table(nba_pruebas$Position_[)
table(nba_pruebas$Position_)
View(nba)
nba$Position <- as.character(nba$Position)
for (i in 1:nrow(nba)) {
if (nba$Position[i] %in% Forward){
nba$Position[i] = "Forward"
} else if (nba$Position[i] %in% Guard){
nba$Position[i] = "Guard"
} else if (nba$Position[i] == "PG"){
nba$Position[i] = "Point Guard"
} else if (nba$Position[i] == "SG"){
nba$Position[i] = "Shooting Guard"
} else if (nba$Position[i] == "SF"){
nba$Position[i] = "Small Forward"
} else if (nba$Position[i] == "PF"){
nba$Position[i] = "Power Forward"
} else if (nba$Position[i] == "C"){
nba$Position[i] = "center"
}
}
table(nba$Position)
max(table(nba$Position))
max(nba$Position)
max(count(nba$Position))
table(nba$Position)
unique(nba$Team)
count(unique(nba$Team))
(unique(nba$Team))
# Hay 35 equipos distintos
length(unique(nba$Team))
unique(nba$Team)
# Hay 35 equipos distintos
length(unique(nba$Team))
sort(table(nba$Team))
sort(table(nba$Team), decreasing = TRUE)
sort(table(nba$Team), decreasing = TRUE)[1:5]
jugadores <- unique(nba$Player)
jugadores
jugadores <- as.character(unique(nba$Player))
jugadores
nba.unique_prueba <- merge(jugadores, nba, by.x = "jugadores", by.y = "Player", all.x = TRUE, all.y = FALSE)
data.frame(jugadores)
nba.unique_prueba <- merge(data.frame(jugadores), nba, by.x = "jugadores", by.y = "Player", all.x = TRUE, all.y = FALSE)
View(nba.unique_prueba)
nba.unique_prueba <- merge(data.frame(jugadores), nba, by.x = "jugadores", by.y = "Player", all.x = Fal, all.y = FALSE)
nba.unique_prueba <- merge(data.frame(jugadores), nba, by.x = "jugadores", by.y = "Player", all.x = FALSE, all.y = FALSE)
nba.unique_prueba <- distinct(nba$Player)
nba_pruebas$Player <- as.character(nba_pruebas$Player)
nba.unique_prueba <- distinct(nba_pruebas$Player)
nba.unique_prueba <- unique(nba$Player)
nba.unique_prueba <- duplicated(nba$Player)
nba.unique_prueba <- duplicated.data.frame(nba$Player)
nba.unique_prueba <- nba
for (i in i:nrow(nba.unique_prueba) {
for (i in i:nrow(nba.unique_prueba)) {
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player[i]))
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player[i])
for (i in i:nrow(nba.unique_prueba)) {
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player[i])
}
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player["Karl Malone"])
count(nba.unique_prueba$Player["Karl Malone"])
table(nba.unique_prueba$Player)
nba.unique_prueba$Player <- as.character(nba.unique_prueba$Player)
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player["Shaquille O'Neal"])
nba.unique_prueba %>% distinct(Player)
nba.unique_prueba %>% distinct(Player, .keep_all = TRUE)
View(nba.unique_prueba)
View(nba.unique_prueba)
View(nba.unique_prueba)
nba.unique_prueba %>% distinct(Player, .keep_all = TRUE)
nba.unique_prueba <- nba.unique_prueba %>% distinct(Player, .keep_all = TRUE)
View(nba.unique_prueba)
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE)
View(nba.unique)
View(nba.unique_prueba)
View(nba.unique_prueba)
