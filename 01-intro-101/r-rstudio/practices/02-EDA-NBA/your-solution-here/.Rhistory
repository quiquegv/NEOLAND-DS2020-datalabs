}
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba_pruebas)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba_pruebas$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
eliminador_kg(nba_pruebas$Weight[i])
nba_pruebas$Weight[i] = convertidor_libras(nba_pruebas$Weight[i])}
else {nba_pruebas$Weight[i]}
}
View(nba_pruebas)
table(nba_pruebas$Weight)
nba_pruebas <- nba
nba_pruebas <- nba
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba_pruebas)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba_pruebas$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba_pruebas$Weight1[i] = eliminador_kg(nba_pruebas$Weight[i])
nba_pruebas$Weight1[i] = convertidor_libras(nba_pruebas$Weight[i])}
else {nba_pruebas$Weight1[i] = nba_pruebas$Weight[i] }
}
table(nba_pruebas$Weight)
table(nba_pruebas$Weight1)
table(nba_pruebas$Weight1)
table(nba_pruebas$Weight)
str(nba_pruebas)
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight1[i] = eliminador_kg(nba$Weight[i])
nba$Weight1[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight1[i] = nba$Weight[i] }
}
View(nba_backup)
nba <- nba_backup
nba$Height <- as.character(nba$Height) #transformo en character la dimensión Height
is.character(nba$Height)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("-",nba$Height[i]) == 1){ # si contiene "-" aplica la funcion convertidor_cm
nba$Height[i] = convertidor_cm(nba$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1) # si contiene cm aplica la función eliminar_cm
{nba$Height[i] = eliminador_cm(nba$Height[i])}
}
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
mean(nba$Height)
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight[i] = eliminador_kg(nba$Weight[i])
nba$Weight[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight[i] = nba$Weight[i] }
}
table(nba$Weight)
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
nba$Height <- as.integer(nba$weight) # Valor numérico
nba$Height <- as.integer(nba$Weight) # Valor numérico
nba$Weight <- as.integer(nba$Weight) # Valor numérico
table(nba$Weight)
mean(nba$Weight)
sd(nba$Weight)
boxplot(nba$Weight, ylab = 'Peso de jugadores')
View(nba)
nba <- nba_backup
nba$Height <- as.character(nba$Height) #transformo en character la dimensión Height
is.character(nba$Height)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("-",nba$Height[i]) == 1){ # si contiene "-" aplica la funcion convertidor_cm
nba$Height[i] = convertidor_cm(nba$Height[i])}
if (grepl("cm",nba_pruebas$Height[i]) == 1) # si contiene cm aplica la función eliminar_cm
{nba$Height[i] = eliminador_cm(nba$Height[i])}
}
nba$Height <- as.integer(nba$Height) # Valor numérico
table(nba$Height)
mean(nba$Height)
sd(nba$Height)
boxplot(nba$Height, ylab = 'Altura de jugadores')
nba$Weight <- as.character(nba$Weight) #transformo en character la dimensión Height
is.character(nba$Weight)
for (i in 1:nrow(nba)){ #ejecuto el cambio con un for que itera todas las filas y le doy dos condiciones
if (grepl("kg",nba$Weight[i]) == 1){ # si contiene "kg" aplica la funcion eliminados_kg y convertidor_libras
nba$Weight[i] = eliminador_kg(nba$Weight[i])
nba$Weight[i] = convertidor_libras(nba$Weight[i])}
else {nba$Weight[i] = nba$Weight[i] }
}
table(nba$Weight)
nba$Weight <- as.integer(nba$Weight) # Valor numérico
table(nba$Weight)
mean(nba$Weight)
sd(nba$Weight)
boxplot(nba$Weight, ylab = 'Peso de jugadores')
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in i:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
Forward <- c("F","F-C","FC")
Guard <- c("G","G-F", "GF")
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in i:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
View(nba_pruebas)
for (i in 1:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
for (i in 1:nrow(nba_pruebas)) {
ifelse (nba_pruebas$Position %in% Forward){
for (i in 1:nrow(nba_pruebas)) {
ifelse (nba_pruebas$Position %in% Forward){
nba_pruebas <- nba_backup
table(nba_pruebas$Position)
info(nba_pruebas$Position)
library(dplyr)
Forward <- c("F","F-C","FC")
Guard <- c("G","G-F", "GF")
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in 1:nrow(nba_pruebas)) {
if (nba_pruebas$Position %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position == "C"){
nba_pruebas$Position_[i] = "center"
}
}
nba_pruebas <- nba_backup
nba_pruebas$Position <- as.character(nba_pruebas$Position)
for (i in 1:nrow(nba_pruebas)) {
if (nba_pruebas$Position[i] %in% Forward){
nba_pruebas$Position_[i] = "Forward"
} else if (nba_pruebas$Position[i] %in% Guard){
nba_pruebas$Position_[i] = "Guard"
} else if (nba_pruebas$Position[i] == "PG"){
nba_pruebas$Position_[i] = "Point Guard"
} else if (nba_pruebas$Position[i] == "SG"){
nba_pruebas$Position_[i] = "Shooting Guard"
} else if (nba_pruebas$Position[i] == "SF"){
nba_pruebas$Position_[i] = "Small Forward"
} else if (nba_pruebas$Position[i] == "PF"){
nba_pruebas$Position_[i] = "Power Forward"
} else if (nba_pruebas$Position[i] == "C"){
nba_pruebas$Position_[i] = "center"
}
}
View(nba_pruebas)
table(nba_pruebas$Position_[)
table(nba_pruebas$Position_)
View(nba)
nba$Position <- as.character(nba$Position)
for (i in 1:nrow(nba)) {
if (nba$Position[i] %in% Forward){
nba$Position[i] = "Forward"
} else if (nba$Position[i] %in% Guard){
nba$Position[i] = "Guard"
} else if (nba$Position[i] == "PG"){
nba$Position[i] = "Point Guard"
} else if (nba$Position[i] == "SG"){
nba$Position[i] = "Shooting Guard"
} else if (nba$Position[i] == "SF"){
nba$Position[i] = "Small Forward"
} else if (nba$Position[i] == "PF"){
nba$Position[i] = "Power Forward"
} else if (nba$Position[i] == "C"){
nba$Position[i] = "center"
}
}
table(nba$Position)
max(table(nba$Position))
max(nba$Position)
max(count(nba$Position))
table(nba$Position)
unique(nba$Team)
count(unique(nba$Team))
(unique(nba$Team))
# Hay 35 equipos distintos
length(unique(nba$Team))
unique(nba$Team)
# Hay 35 equipos distintos
length(unique(nba$Team))
sort(table(nba$Team))
sort(table(nba$Team), decreasing = TRUE)
sort(table(nba$Team), decreasing = TRUE)[1:5]
jugadores <- unique(nba$Player)
jugadores
jugadores <- as.character(unique(nba$Player))
jugadores
nba.unique_prueba <- merge(jugadores, nba, by.x = "jugadores", by.y = "Player", all.x = TRUE, all.y = FALSE)
data.frame(jugadores)
nba.unique_prueba <- merge(data.frame(jugadores), nba, by.x = "jugadores", by.y = "Player", all.x = TRUE, all.y = FALSE)
View(nba.unique_prueba)
nba.unique_prueba <- merge(data.frame(jugadores), nba, by.x = "jugadores", by.y = "Player", all.x = Fal, all.y = FALSE)
nba.unique_prueba <- merge(data.frame(jugadores), nba, by.x = "jugadores", by.y = "Player", all.x = FALSE, all.y = FALSE)
nba.unique_prueba <- distinct(nba$Player)
nba_pruebas$Player <- as.character(nba_pruebas$Player)
nba.unique_prueba <- distinct(nba_pruebas$Player)
nba.unique_prueba <- unique(nba$Player)
nba.unique_prueba <- duplicated(nba$Player)
nba.unique_prueba <- duplicated.data.frame(nba$Player)
nba.unique_prueba <- nba
for (i in i:nrow(nba.unique_prueba) {
for (i in i:nrow(nba.unique_prueba)) {
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player[i]))
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player[i])
for (i in i:nrow(nba.unique_prueba)) {
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player[i])
}
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player["Karl Malone"])
count(nba.unique_prueba$Player["Karl Malone"])
table(nba.unique_prueba$Player)
nba.unique_prueba$Player <- as.character(nba.unique_prueba$Player)
nba.unique_prueba %>% group_by(nba.unique_prueba$Player) %>% slice(nba.unique_prueba$Player["Shaquille O'Neal"])
nba.unique_prueba %>% distinct(Player)
nba.unique_prueba %>% distinct(Player, .keep_all = TRUE)
View(nba.unique_prueba)
View(nba.unique_prueba)
View(nba.unique_prueba)
nba.unique_prueba %>% distinct(Player, .keep_all = TRUE)
nba.unique_prueba <- nba.unique_prueba %>% distinct(Player, .keep_all = TRUE)
View(nba.unique_prueba)
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE)
View(nba.unique)
View(nba.unique_prueba)
View(nba.unique_prueba)
View(nba)
knitr::opts_chunk$set(echo = TRUE)
nba.unique <- order(nba.unique$Height)
View(nba_pruebas)
View(nba.unique_prueba)
View(nba_pruebas)
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE) # uso la funcion distinct con keep_all = True para que mantenga el ersto de variables. Ha cogido la primera aparición de cada valor.
nba.unique <- nba.unique(order(nba.unique$Height))
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE) # uso la funcion distinct con keep_all = True para que mantenga el ersto de variables. Ha cogido la primera aparición de cada valor.
library(dplyr)
library(ggplot2)
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE) # uso la funcion distinct con keep_all = True para que mantenga el ersto de variables. Ha cogido la primera aparición de cada valor.
listado_10_mas_altos <- group_by(nba.unique$Player) <- order(nba.unique$Height, decreasing = TRUE)[1:10]
listado_10_mas_altos <- nba.unique  %>%  group_by(nba.unique$Player)  %>%  order(nba.unique$Height, decreasing = TRUE)[1:10]
View(listado_10_mas_altos)
remove(listado_10_mas_altos)
sort(table(nba.unique$Height), decreasing = TRUE)[1:10]
sort(nba.unique$Height), decreasing = TRUE)[1:10]
sort(nba.unique$Height, decreasing = TRUE)[1:10]
group_by(nba.unique$Player) %>% sort(nba.unique$Height, decreasing = TRUE)[1:10]
nba.unique$Player <- as.character(nba.unique$Player)
group_by(nba.unique$Player) %>% sort(nba.unique$Height, decreasing = TRUE)[1:10]
nba.unique %>% select(Player, Height) %>% sort(Height, decreasing = TRUE)[1:10]
nba.unique %>% select(Player, Height) %>% sort(Height, decreasing = TRUE)[1:10]
nba.unique  %>% sort(Height, decreasing = TRUE) %>% select(Player, Height)[1:10]
View(nba.unique)
nba.unique  %>% sort(Height, decreasing = TRUE) %>% select(Player, Height)[1:10]
nba.unique  %>% sort(Height, decreasing = TRUE) %>% select(Player, Height)[1:10]
nba.unique  %>% sort(nba.unique$Height, decreasing = TRUE) %>% select(Player, Height)[1:10]
sort(nba.unique$Height, decreasing = TRUE) %>% select(nba.unique$Player, nba.unique$Height)[1:10]
Listado_alturas <- select(nba.unique$Player, nba.unique$Height)
nba.unique <- nba %>% distinct(Player, .keep_all = TRUE) # uso la funcion distinct con keep_all = True para que mantenga el ersto de variables. Ha cogido la primera aparición de cada valor.
player_Height <- select(nba.unique$Player,nba.unique$Height)
player_Height <- select_(nba.unique$Player,nba.unique$Height)
player_Height <- select(nba.unique$Player,nba.unique$Height)
View(nba.unique)
order(nba.unique$Height)[1:5],[6:]
[order(nba.unique$Height)[1:5],[6:]]
nba.unique[order(nba.unique$Height)[1:5],[6:]]
order(nba.unique$Height)[1:5]
top10_jugadores_bajos <- order(nba.unique$Height)[1:5]
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:5]]
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:5],[6:]]
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:5],6]
top10_jugadores_bajos
nba$Player <- as.character(nba$Player)
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:5],6]
nba.unique$Player <- as.character(nba.unique$Player)
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:5],6]
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:5],5:6]
View(top10_jugadores_bajos)
top10_jugadores_bajos
top10_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:10],5:6]
top10_jugadores_bajos
top10_jugadores_altos <- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:10],5:6]
top10_jugadores_altos
boxplot(nba.unique$Weight)
table(nba.unique$Weight)
nba.avg <- nba.unique[nba.unique$Weight < 300]
nba.avg <- nba.unique[nba.unique$Weight < 300, ]
boxplot(nba.unique$Weight)
boxplot(nba.avg$Weight)
nba.avg <- nba.unique[nba.unique$Weight < 307, ] # genero el nuevo DF con un filtro que elimne todas las filas con un valor de Weight mayor que 300.
table(nba.unique$Weight) # veo en que los mayores valores son 310 y 325. Son los que voy a eliminar.
boxplot(nba.unique$Weight) # Observo en el Boxplot que hay dos valores fuera de los cuartiles.
nba.avg <- nba.unique[nba.unique$Weight < 307, ] # genero el nuevo DF con un filtro que elimne todas las filas con un valor de Weight mayor que 300.
nba.avg <- nba.unique[nba.unique$Weight < 308, ] # genero el nuevo DF con un filtro que elimne todas las filas con un valor de Weight mayor que 300.
boxplot(nba.unique$Weight)
boxplot(nba.avg$Weight)
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height, decreasing =
FALSE)[1:50],6]
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_Altos<- nba.unique[order(nba.unique$Height, decreasing = FALSE)[1:50],6]
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_Altos<- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:50],6]
nba_pruebas <- nba
if (nba_pruebas$Player[i] %in% top50_jugadores_Altos){
nba_pruebas$Altura[i] = "alto"
} else if (nba_pruebas$Player[i] %in% top50_jugadores_bajos){
nba_pruebas$Altura[i] = "bajo"
} else {"normal"}
for (i in 1:nrow(nba_pruebas)){
if (nba_pruebas$Player[i] %in% top50_jugadores_Altos){
nba_pruebas$Altura[i] = "alto"
} else if (nba_pruebas$Player[i] %in% top50_jugadores_bajos){
nba_pruebas$Altura[i] = "bajo"
} else {"normal"}
}
View(nba_pruebas)
View(nba_pruebas)
nba_pruebas <- nba
for (i in 1:nrow(nba_pruebas)){
if (nba_pruebas$Player[i] %in% top50_jugadores_Altos){
nba_pruebas$Altura[i] = "alto"
} else if (nba_pruebas$Player[i] %in% top50_jugadores_bajos){
nba_pruebas$Altura[i] = "bajo"
} else {nba_pruebas$Altura[i] = "normal"}
}
View(nba_pruebas)
table(nba_pruebas$Altura)
table(unique(nba_pruebas$Altura))
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_Altos){
nba$Altura[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_bajos){
nba$Altura[i] = "bajo"
} else {nba$Altura[i] = "normal"}
}
rm(nba.unique_prueba)
nba_backup <- nba
top50_jugadores_delgados <- nba.unique[order(nba.unique$Weight)[1:50],6]
top50_jugadores_gordos<- nba.unique[order(nba.unique$Weight, decreasing = TRUE)[1:50],6]
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_gordos){
nba$Peso[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_delgados){
nba$Peso[i] = "bajo"
} else {nba$Peso[i] = "normal"}
}
mean(nba$Weight, group_by(nba$Altura))
summary(nba.unique$Weight)
summary(nba.avg$Weight)
summary(nba.unique$Weight)
summary(nba.avg$Weight)
nba %>% group_by(Altura) %>% summarise(mean(Weight))
boxplot(nba$Altura,nba$Weight)
boxplot(nba$Weight)
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_Altos){
nba.unique$Altura[i] = "alto"
} else if (nba.unique){
nba.unique$Altura[i] = "bajo"
} else {nba.unique$Altura[i] = "normal"}
}
top50_jugadores_bajos <- nba.unique[order(nba.unique$Height)[1:50],6]
top50_jugadores_Altos<- nba.unique[order(nba.unique$Height, decreasing = TRUE)[1:50],6]
nba_pruebas <- nba
for (i in 1:nrow(nba)){
if (nba$Player[i] %in% top50_jugadores_Altos){
nba$Altura[i] = "alto"
} else if (nba$Player[i] %in% top50_jugadores_bajos){
nba$Altura[i] = "bajo"
} else {nba$Altura[i] = "normal"}
}
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_Altos){
nba.unique$Altura[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_bajos){
nba.unique$Altura[i] = "bajo"
} else {nba.unique$Altura[i] = "normal"}
}
nba_backup <- nba
View(nba.unique)
View(nba.unique)
for (i in 1:nrow(nba.unique)){
if (nba.unique$Player[i] %in% top50_jugadores_gordos){
nba.unique$Peso[i] = "alto"
} else if (nba.unique$Player[i] %in% top50_jugadores_delgados){
nba.unique$Peso[i] = "bajo"
} else {nba.unique$Peso[i] = "normal"}
}
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
boxplot(nba.unique$Weight ~ nba.unique$Altura)
boxplot(nba.unique$Weight ~ nba.unique$Altura, lex.order = TRUE)
boxplot(nba.unique$Weight ~ nba.unique$Altura, lex.order = FALSE)
nba.unique$Altura <- as.factor(nba.unique$Altura, ordered("alto" > "normal" > "bajo"))
nba.unique$Altura <- as.factor(nba.unique$Altura, ordered = is.ordered("alto" > "normal" > "bajo"))
boxplot(nba.unique$Weight ~ nba.unique$Altura, lex.order = FALSE)
nba.unique$Altura <- as.factor(nba.unique$Altura, is.ordered("alto" > "normal" > "bajo"))
table(nba.unique$Altura)
str(nba.unique$Altura)
levels(nba.unique$Altura) <- c("alto", "normal", "bajo")
boxplot(nba.unique$Weight ~ nba.unique$Altura, lex.order = FALSE)
str(nba.unique)
nba.unique$Altura <- as.factor(nba.unique$Altura)
levels(nba.unique$Altura) <- c("alto", "normal", "bajo")
boxplot(nba.unique$Weight ~ nba.unique$Altura, lex.order = FALSE)
str(nba.unique)
View(nba.unique)
boxplot(nba.unique$Weight ~ nba.unique$Altura, lex.order = TRUE)
boxplot(nba.unique$Weight ~ nba.unique$Altura)
nba.unique$Altura <- as.factor(nba.unique$Altura)
levels(nba.unique$Altura) <- c("alto", "normal", "bajo")
boxplot(nba.unique$Weight ~ nba.unique$Altura)
View(nba.unique)
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
levels(nba.unique$Altura) <- c("alto", "bajo", "normal")
boxplot(nba.unique$Weight ~ nba.unique$Altura)
str(nba.unique)
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
View(nba.unique)
is.ordered(nba.unique$Altura)
nba.unique$Altura <- as.factor(nba.unique$Altura, ordered("alto", "normal", "bajo"))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
knitr::opts_chunk$set(echo = TRUE)
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
library(dplyr)
library(dplyr)
library(ggplot2)
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
```{r}
nba.unique %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique %>% group_by(Altura) %>% summarise(sd(Weight))
nba.unique$Altura <- as.factor(nba.unique$Altura, ordered(1, 2, 3))
nba.unique$Altura <- as.factor(nba.unique$Altura, ordered =  is ordered(1, 2, 3))
is.factor(nba.unique$Altura)
levesls(nba.unique$Altura)
levels(nba.unique$Altura)
nba.unique_pruebas <- nba.unique
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, levels = (nba.unique_pruebas$Altura)[c(1,3,2)] )
nba.unique_pruebas$Altura <- factor(nba.unique_pruebas$Altura, levels = levels(nba.unique_pruebas$Altura)[c(1,3,2)] )
levels(nba.unique_pruebas)
levels(nba.unique_pruebas)
is.factor(nba.unique_pruebas$Altura)
(nba.unique_pruebas)
is.factor(nba.unique_pruebas$Altura)
nba.unique_pruebas %>% group_by(Altura) %>% summarise(mean(Weight))
nba.unique_pruebas %>% group_by(Altura) %>% summarise(sd(Weight))
boxplot(nba.unique_pruebas$Weight ~ nba.unique_pruebas$Altura)
nba.unique$Altura <- factor(nba.unique$Altura, levels = levels(nba.unique$Altura)[c(2,3,1)] )
levels(nba.unique)
is.factor(nba.unique$Altura)
boxplot(nba.unique$Weight ~ nba.unique$Altura)
View(nba.unique)
jugadores_alturanormal_pesoalto <- nba.unique[nba.unique$Altura == "normal" & nba.unique$Peso == "alto",6 ]
jugadores_alturanormal_pesoalto
knitr::opts_chunk$set(echo = TRUE)
install(nortest)
install.packages(nortest)
